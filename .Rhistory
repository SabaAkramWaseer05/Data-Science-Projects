oceania_data <- data %>% filter(continent == "Oceania")
ggplot(oceania_data, aes(x = subcontinent, fill = status)) +
geom_bar() +
labs(x = "Subcontinent in Oceania", y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data, aes(x = continent, y = net_migr_rate)) +
geom_boxplot() +
labs(x = "Continent", y = "Net Migration Rate (per 1,000 persons)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data, aes(x = subcontinent, y = net_migr_rate)) +
geom_boxplot() +
facet_grid(. ~ continent, scales = "free_x") +
labs(x = "Subcontinent", y = "Net Migration Rate (per 1,000 persons)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
median_migration <- data %>%
group_by(subcontinent, continent) %>%
summarise(median_net_migr = median(net_migr_rate, na.rm = TRUE)) %>%
ungroup() %>%
mutate(subcontinent = fct_reorder(subcontinent, median_net_migr))
ggplot(median_migration, aes(x = median_net_migr, y = subcontinent, color = continent)) +
geom_point(size = 3) +
scale_color_viridis_d(option = "C") +
labs(x = "Median Net Migration Rate (per 1,000 persons)", y = "Subcontinent") +
theme_minimal()
median_unemployment <- data %>%
group_by(subcontinent, continent) %>%
summarise(median_youth_unempl = median(youth_unempl_rate, na.rm = TRUE)) %>%
ungroup() %>%
mutate(subcontinent = fct_reorder(subcontinent, median_youth_unempl))
ggplot(median_unemployment, aes(x = median_youth_unempl, y = subcontinent, fill = continent)) +
geom_bar(stat = "identity", alpha = 0.7) +
scale_fill_viridis_d(option = "C") +
labs(x = "Median Youth Unemployment Rate (%)", y = "Subcontinent") +
theme_bw()
unemployment_stats <- data %>%
group_by(subcontinent, continent) %>%
summarise(median_youth_unempl = median(youth_unempl_rate, na.rm = TRUE),
q25 = quantile(youth_unempl_rate, 0.25, na.rm = TRUE),
q75 = quantile(youth_unempl_rate, 0.75, na.rm = TRUE)) %>%
ungroup() %>%
mutate(subcontinent = fct_reorder(subcontinent, median_youth_unempl))
ggplot(unemployment_stats, aes(x = median_youth_unempl, y = subcontinent, fill = continent)) +
geom_bar(stat = "identity", alpha = 0.7) +
geom_errorbar(aes(xmin = q25, xmax = q75), width = 0.5) +
scale_fill_viridis_d(option = "C") +
labs(x = "Median Youth Unemployment Rate (%)", y = "Subcontinent") +
theme_bw()
ggplot(data, aes(x = expenditure, y = net_migr_rate, color = status)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Education Expenditure (% of GDP)", y = "Net Migration Rate (per 1,000 persons)") +
theme_minimal()
ggplot(data, aes(x = youth_unempl_rate, y = net_migr_rate, color = status)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Youth Unemployment Rate (%)", y = "Net Migration Rate (per 1,000 persons)") +
theme_minimal()
# Note: Download 2020 population data from World Bank and place it in the directory.
# Replace the placeholder path below with the actual file path.
# population_data <- read.csv("C:/Users/Saba Akram/Documents/Case 3/population_2020.csv")
# merged_data <- left_join(data, population_data, by = "ISO3")
# head(merged_data)
message("Please download 2020 population data from World Bank and update the file path for merging.")
europe_data <- data %>% filter(continent == "Europe")
ggplot(europe_data, aes(x = expenditure, y = net_migr_rate)) +
geom_point(alpha = 0.7) +
labs(x = "Education Expenditure (% of GDP)", y = "Net Migration Rate (per 1,000 persons)") +
theme_minimal() +
theme(legend.position = "none")
p <- ggplot(data, aes(x = expenditure, y = net_migr_rate, color = continent, text = country)) +
geom_point(alpha = 0.7) +
labs(x = "Education Expenditure (% of GDP)", y = "Net Migration Rate (per 1,000 persons)") +
theme_minimal()
ggplotly(p, tooltip = c("text", "x", "y"))
ggparcoord(data,
columns = c(which(colnames(data) == "expenditure"),
which(colnames(data) == "youth_unempl_rate"),
which(colnames(data) == "net_migr_rate")),
groupColumn = "status",
scale = "globalminmax") +
labs(x = "Variable", y = "Value") +
theme_minimal()
mapCountryData(joinCountryData2Map(data, joinCode = "ISO3", nameJoinColumn = "ISO3"),
nameColumnToPlot = "expenditure",
mapTitle = "Education Expenditure (% of GDP) by Country")
# Note: Download 2020 population data from World Bank and place it in the directory.
# Replace the placeholder path below with the actual file path.
population_data <- read.csv("C:/Users/Saba Akram/Documents/Case 3/population_2020.csv")
# Note: Download 2020 population data from World Bank and place it in the directory.
# Replace the placeholder path below with the actual file path.
population_data <- read.csv("C:/Users/Saba Akram/Documents/Case 3/continents2.csv")
merged_data <- left_join(data, population_data, by = "ISO3")
# Load the population data
population_data <- read.csv("C:/Users/Saba Akram/Documents/Case 3/continents2.csv", stringsAsFactors = FALSE)
# Check column names in both datasets
colnames(data)
colnames(population_data)
# Rename the key column in population_data if necessary
# For example, if the column is named "iso_code" instead of "ISO3":
if (!"ISO3" %in% colnames(population_data)) {
colnames(population_data)[colnames(population_data) == "iso_code"] <- "ISO3"
}
# Perform the left join
merged_data <- left_join(data, population_data, by = "ISO3")
# Load the population data
population_data <- read.csv("C:/Users/Saba Akram/Documents/Case 3/continents2.csv", stringsAsFactors = FALSE)
# Rename the column in population_data to match the key in data
colnames(population_data)[colnames(population_data) == "alpha.3"] <- "ISO3"
# Perform the left join
merged_data <- left_join(data, population_data, by = "ISO3")
# Inspect the merged data
head(merged_data)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, fig.width = 7, fig.height = 5)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(forcats)
library(plotly)
library(GGally)
library(rworldmap)
library(sf)
library(rnaturalearthdata)
data <- read.csv("C:/Users/Saba Akram/Documents/Case 3/file_out2.csv", stringsAsFactors = FALSE)
data[data == "."] <- NA
data <- data %>%
filter(!is.na(status) & status != "") %>%
filter(!is.na(continent) & continent != "" & !is.na(subcontinent) & subcontinent != "")
# Ensure numeric conversion for relevant columns
data$youth_unempl_rate <- as.numeric(data$youth_unempl_rate)
data$expenditure <- as.numeric(data$expenditure)
data$net_migr_rate <- as.numeric(data$net_migr_rate)
data$status <- factor(data$status, levels = c("H", "UM", "LM", "L"))
ggplot(data, aes(x = expenditure, fill = status)) +
geom_density(color = "black", alpha = 0.5) +
labs(x = "Education expenditure (% of GDP)", y = "Density") +
theme_minimal() +
theme(legend.position = c(0.5, 0.9), legend.direction = "horizontal",
legend.title = element_blank())
ggplot(data, aes(x = continent, fill = status)) +
geom_bar() +
labs(x = "Continent", y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data, aes(x = continent, fill = status)) +
geom_bar(position = "fill") +
labs(x = "Continent", y = "Proportion") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
mosaicplot(table(data$continent, data$status),
main = "Mosaic Plot of Continent and Income Status",
color = TRUE)
oceania_data <- data %>% filter(continent == "Oceania")
ggplot(oceania_data, aes(x = subcontinent, fill = status)) +
geom_bar() +
labs(x = "Subcontinent in Oceania", y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data, aes(x = continent, y = net_migr_rate)) +
geom_boxplot() +
labs(x = "Continent", y = "Net Migration Rate (per 1,000 persons)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data, aes(x = subcontinent, y = net_migr_rate)) +
geom_boxplot() +
facet_grid(. ~ continent, scales = "free_x") +
labs(x = "Subcontinent", y = "Net Migration Rate (per 1,000 persons)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
median_migration <- data %>%
group_by(subcontinent, continent) %>%
summarise(median_net_migr = median(net_migr_rate, na.rm = TRUE)) %>%
ungroup() %>%
mutate(subcontinent = fct_reorder(subcontinent, median_net_migr))
ggplot(median_migration, aes(x = median_net_migr, y = subcontinent, color = continent)) +
geom_point(size = 3) +
scale_color_viridis_d(option = "C") +
labs(x = "Median Net Migration Rate (per 1,000 persons)", y = "Subcontinent") +
theme_minimal()
median_unemployment <- data %>%
group_by(subcontinent, continent) %>%
summarise(median_youth_unempl = median(youth_unempl_rate, na.rm = TRUE)) %>%
ungroup() %>%
mutate(subcontinent = fct_reorder(subcontinent, median_youth_unempl))
ggplot(median_unemployment, aes(x = median_youth_unempl, y = subcontinent, fill = continent)) +
geom_bar(stat = "identity", alpha = 0.7) +
scale_fill_viridis_d(option = "C") +
labs(x = "Median Youth Unemployment Rate (%)", y = "Subcontinent") +
theme_bw()
unemployment_stats <- data %>%
group_by(subcontinent, continent) %>%
summarise(median_youth_unempl = median(youth_unempl_rate, na.rm = TRUE),
q25 = quantile(youth_unempl_rate, 0.25, na.rm = TRUE),
q75 = quantile(youth_unempl_rate, 0.75, na.rm = TRUE)) %>%
ungroup() %>%
mutate(subcontinent = fct_reorder(subcontinent, median_youth_unempl))
ggplot(unemployment_stats, aes(x = median_youth_unempl, y = subcontinent, fill = continent)) +
geom_bar(stat = "identity", alpha = 0.7) +
geom_errorbar(aes(xmin = q25, xmax = q75), width = 0.5) +
scale_fill_viridis_d(option = "C") +
labs(x = "Median Youth Unemployment Rate (%)", y = "Subcontinent") +
theme_bw()
ggplot(data, aes(x = expenditure, y = net_migr_rate, color = status)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Education Expenditure (% of GDP)", y = "Net Migration Rate (per 1,000 persons)") +
theme_minimal()
ggplot(data, aes(x = youth_unempl_rate, y = net_migr_rate, color = status)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Youth Unemployment Rate (%)", y = "Net Migration Rate (per 1,000 persons)") +
theme_minimal()
# Load the population data
population_data <- read.csv("C:/Users/Saba Akram/Documents/Case 3/continents2.csv", stringsAsFactors = FALSE)
# Rename the column in population_data to match the key in data
colnames(population_data)[colnames(population_data) == "alpha.3"] <- "ISO3"
# Perform the left join
merged_data <- left_join(data, population_data, by = "ISO3")
# Inspect the merged data
head(merged_data)
europe_data <- data %>% filter(continent == "Europe")
ggplot(europe_data, aes(x = expenditure, y = net_migr_rate)) +
geom_point(alpha = 0.7) +
labs(x = "Education Expenditure (% of GDP)", y = "Net Migration Rate (per 1,000 persons)") +
theme_minimal() +
theme(legend.position = "none")
p <- ggplot(data, aes(x = expenditure, y = net_migr_rate, color = continent, text = country)) +
geom_point(alpha = 0.7) +
labs(x = "Education Expenditure (% of GDP)", y = "Net Migration Rate (per 1,000 persons)") +
theme_minimal()
ggplotly(p, tooltip = c("text", "x", "y"))
ggparcoord(data,
columns = c(which(colnames(data) == "expenditure"),
which(colnames(data) == "youth_unempl_rate"),
which(colnames(data) == "net_migr_rate")),
groupColumn = "status",
scale = "globalminmax") +
labs(x = "Variable", y = "Value") +
theme_minimal()
mapCountryData(joinCountryData2Map(data, joinCode = "ISO3", nameJoinColumn = "ISO3"),
nameColumnToPlot = "expenditure",
mapTitle = "Education Expenditure (% of GDP) by Country")
# Generate HTML output
rmarkdown::render("case_study_3.Rmd", output_format = "html_document")
install.packages(c("tidyverse", "knitr", "rmarkdown", "ggplot2"))
# Load necessary libraries
library(tidyverse)
library(knitr)
# Load dataset (replace `path_to_your_dataset.csv` with your actual file path)
survey_data <- read.csv("path_to_your_dataset.csv")
# Load Libraries
library(ggplot2)
library(dplyr)
library(readr)
library(knitr)
library(corrplot)
# Load Libraries
library(ggplot2)
library(dplyr)
library(readr)
library(knitr)
library(corrplot)
# Load Libraries
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("dplyr")) install.packages("dplyr")
if (!require("readr")) install.packages("readr")
if (!require("knitr")) install.packages("knitr")
if (!require("corrplot")) install.packages("corrplot")
library(ggplot2)
library(dplyr)
library(readr)
library(knitr)
library(corrplot)
# Load Dataset
dataset <- read_csv("C:/Users/Saba Akram/Downloads/student_sleep_patterns.csv")  # Replace with your dataset file name and ensure the file exists
head(dataset)  # Preview the dataset
# Visualization for Q1: Sleep Consistency vs Academic Stress
ggplot(dataset, aes(x = sleep_consistency, y = academic_stress)) +
geom_boxplot() +
labs(title = "Sleep Consistency vs Academic Stress", x = "Sleep Consistency", y = "Academic Stress")
# Load Libraries
if (!require("ggplot2")) install.packages("ggplot2", dependencies = TRUE)
if (!require("dplyr")) install.packages("dplyr", dependencies = TRUE)
if (!require("readr")) install.packages("readr", dependencies = TRUE)
if (!require("knitr")) install.packages("knitr", dependencies = TRUE)
if (!require("corrplot")) install.packages("corrplot", dependencies = TRUE)
library(ggplot2)
library(dplyr)
library(readr)
library(knitr)
library(corrplot)
# Load Dataset
dataset <- read_csv("C:/Users/Saba Akram/Downloads/student_sleep_patterns.csv")  # Update with the correct path
head(dataset)  # Preview the dataset
# Visualization for Q1
ggplot(dataset, aes(x = Sleep_Duration, y = Academic_Stress)) +
geom_boxplot() +
labs(title = "Sleep Duration vs Academic Stress", x = "Sleep Duration (hours)", y = "Academic Stress")
# Visualization for Q1
ggplot(dataset, aes(x = Sleep_Duration, y = Academic_Stress)) +
geom_boxplot() +
labs(title = "Sleep Duration vs Academic Stress", x = "Sleep Duration (hours)", y = "Academic Stress")
# Load Libraries
if (!require("ggplot2")) install.packages("ggplot2", dependencies = TRUE)
if (!require("dplyr")) install.packages("dplyr", dependencies = TRUE)
if (!require("readr")) install.packages("readr", dependencies = TRUE)
if (!require("knitr")) install.packages("knitr", dependencies = TRUE)
if (!require("corrplot")) install.packages("corrplot", dependencies = TRUE)
library(ggplot2)
library(dplyr)
library(readr)
library(knitr)
library(corrplot)
# Load Dataset
dataset <- read_csv("C:/Users/Saba Akram/Downloads/student_sleep_patterns.csv")  # Update with the correct path
head(dataset)  # Preview the dataset
# Visualization for Q1
ggplot(dataset, aes(x = Sleep_Duration, y = Study_Hours)) +
geom_boxplot() +
labs(title = "Sleep Duration vs Study Hours", x = "Sleep Duration (hours)", y = "Study Hours")
# Visualization for Q2
ggplot(dataset, aes(x = Sleep_Duration, y = Screen_Time)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Sleep Duration vs Screen Time", x = "Sleep Duration (hours)", y = "Screen Time (hours)")
# Visualization for Q3
ggplot(dataset, aes(x = Physical_Activity, y = Sleep_Quality)) +
geom_bar(stat = "identity") +
labs(title = "Physical Activity vs Sleep Quality", x = "Physical Activity (minutes)", y = "Sleep Quality (rating)")
# Summary Statistics
summary_stats <- dataset %>%
summarise(
Sleep_Duration_Mean = mean(Sleep_Duration, na.rm = TRUE),
Study_Hours_Mean = mean(Study_Hours, na.rm = TRUE),
Screen_Time_Mean = mean(Screen_Time, na.rm = TRUE),
Physical_Activity_Mean = mean(Physical_Activity, na.rm = TRUE)
)
kable(summary_stats, caption = "Summary Statistics")
# Correlation Analysis
correlation_matrix <- cor(dataset[, c("Sleep_Duration", "Study_Hours", "Screen_Time", "Physical_Activity")], use = "complete.obs")
corrplot(correlation_matrix, method = "circle")
# Hypothesis Testing
t_test_result <- t.test(Sleep_Quality ~ Physical_Activity, data = dataset)
# Create a grouping factor based on median Physical_Activity
dataset <- dataset %>%
mutate(Physical_Activity_Group = ifelse(Physical_Activity > median(Physical_Activity, na.rm = TRUE),
"High", "Low"))
# Perform t-test using the new grouping variable
t_test_result <- t.test(Sleep_Quality ~ Physical_Activity_Group, data = dataset)
print(t_test_result)
# Conclusion
cat("Based on the analysis:\n",
"- Sleep duration impacts study hours and screen time.\n",
"- Physical activity is associated with sleep quality.\n",
"- Correlation and hypothesis testing validate the relationships between variables.")
shiny::runApp('Shiny App/CIA_Factbook_Analysis')
runApp('Shiny App/CIA_Factbook_Analysis')
runApp('Shiny App/CIA_Factbook_Analysis')
runApp('Shiny App/CIA_Factbook_Analysis')
library(jsonlite)
# Load JSON data
data <- fromJSON("data_cia2.json")
install.packages("rsconnect")
rsconnect::setAccountInfo(name='your_account_name',
token='your_token',
secret='your_secret')
rsconnect::deployApp("path_to_your_app_folder")
map_data <- left_join(world_map, data, by = "ISO3", relationship = "many-to-many")
clean_data <- data %>% filter(!is.na(.data[[input$variable]]))
rsconnect::setAccountInfo(name='your_account_name',
token='your_token',
secret='your_secret')
library(jsonlite)
# Load JSON data
data <- fromJSON("data_cia2.json")
rsconnect::setAccountInfo(name='your_account_name',
token='your_token',
secret='your_secret')
rsconnect::deployApp("C:\Users\Saba Akram\Documents\Shiny App\CIA_Factbook_Analysis")
install.packages("dplyr")
library(dplyr)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='zuhaibsultan',
token='47B4710EF9DB2BE80AA84F8111DEA6DA',
secret='X7ko7CcZ6+jVFBYalo9tY0NZROP6gu/YLziH1CbE')
library(rsconnect)
rsconnect::deployApp('C:\Users\Saba Akram\Documents\Shiny App\CIA_Factbook_Analysis')
library(rsconnect)
rsconnect::deployApp("C:\Users\Saba Akram\Documents\Shiny App\CIA_Factbook_Analysis")
rsconnect::deployApp("C:/Users/Saba Akram/Documents/Shiny App/CIA_Factbook_Analysis")
data <- fromJSON("data_cia2.json")
shiny::runApp("path_to_your_app_folder")
library(shiny)
library(ggplot2)
library(plotly)
library(DT)
library(jsonlite)
library(dplyr)
library(countrycode)
data <- fromJSON("C:/Users/Saba Akram/Documents/Shiny App/data_cia2.json")
data <- fromJSON("C:/Users/Saba Akram/Documents/Shiny App/data_cia2.json")
rsconnect::setAccountInfo(name='zuhaibsultan',
token='47B4710EF9DB2BE80AA84F8111DEA6DA',
secret='X7ko7CcZ6+jVFBYalo9tY0NZROP6gu/YLziH1CbE')
rsconnect::deployApp("C:\Users\Saba Akram\Documents\Shiny App\CIA_Factbook_Analysis\app.R")
rsconnect::deployApp("C:/Users/Saba Akram/Documents/Shiny App/CIA_Factbook_Analysis")
library(jsonlite)
json_data <- fromJSON("data_cia2.json")
data <- fromJSON("C:/Users/Saba Akram/Documents/Shiny App/CIA_Factbook_Analysis/data_cia2.json")
install.packages("jsonlite")
library(jsonlite)
data <- fromJSON("C:/Users/Saba Akram/Documents/Shiny App/CIA_Factbook_Analysis/data_cia2.json")
install.packages("jsonlite")
library(jsonlite)
data <- fromJSON("C:/Users/Saba Akram/Documents/Shiny App/CIA_Factbook_Analysis/data_cia2.json")
file_content <- readLines("C:/Users/Saba Akram/Documents/Shiny App/CIA_Factbook_Analysis/data_cia2.json")
print(file_content)
file_content <- readLines("C:/Users/Saba Akram/Documents/Shiny App/CIA_Factbook_Analysis/data_cia2.json")
print(file_content)
json_string <- '{"key1": "value1", "key2": "value2"}' # Example JSON
data <- fromJSON(json_string)
install.packages("jsonlite")
library(jsonlite)
data <- fromJSON("C:/Users/Saba Akram/Documents/Shiny App/CIA_Factbook_Analysis/data_cia2.json")
library(jsonlite)
data <- fromJSON("C:/Users/Saba Akram/Documents/Shiny App/CIA_Factbook_Analysis/data_cia2.json")
=''
library(jsonlite)
data <- fromJSON("C:/Users/Saba Akram/Documents/Shiny App/CIA_Factbook_Analysis/data_cia2.json")
json_text <- paste(readLines("C:/Users/Saba Akram/Documents/Shiny App/CIA_Factbook_Analysis/data_cia2.json"), collapse = "")
data <- fromJSON(json_text)
json_text <- paste(readLines("C:/Users/Saba Akram/Documents/Shiny App/CIA_Factbook_Analysis/data_cia2.json"), collapse = "")
data <- fromJSON(json_text)
data <- fromJSON("C:/Users/Saba Akram/Documents/Shiny App/CIA_Factbook_Analysis/data_cia2.json")
data <- fromJSON("data_cia2.json")
getwd()
setwd("C:/Users/Saba Akram/Documents/Shiny App/CIA_Factbook_Analysis")
library(jsonlite)
data <- fromJSON("data_cia2.json")
json_text <- paste(readLines("data_cia2.json"), collapse = "")
data <- fromJSON(json_text)
json_lines <- readLines("data_cia2.json")
print(head(json_lines))
data <- fromJSON("C:/Users/Saba Akram/Documents/Shiny App/CIA_Factbook_Analysis/data_cia2.json")
test_json <- '[{"key1": "value1", "key2": "value2"}]'
test_data <- fromJSON(test_json)
print(test_data)
file.exists("data_cia2.json")
file_content <- readLines("C:/Users/Saba Akram/Documents/Shiny App/CIA_Factbook_Analysis/data_cia2.json")
print(head(file_content, 10))  # Print the first 10 lines
small_json <- '[{"country": "Afghanistan", "X": 1, "ISO3": "AFG"}]'
test_data <- jsonlite::fromJSON(small_json)
print(test_data)
data <- fromJSON("C:/Users/Saba Akram/Documents/Shiny App/CIA_Factbook_Analysis/data_cia2.json")
print(head(data))
shiny::runApp()
runApp()
runApp()
library(shiny)
library(jsonlite)
library(ggplot2)
library(plotly)
library(DT)
library(dplyr)
library(maps)  # Add this line
install.packages("maps")
library(shiny)
library(jsonlite)
library(ggplot2)
library(plotly)
library(DT)
library(dplyr)
library(maps)  # Add this line
rsconnect::deployApp("C:/Users/Saba Akram/Documents/Shiny App/CIA_Factbook_Analysis")
rsconnect::setAccountInfo(name='zuhaibsultan',
token='47B4710EF9DB2BE80AA84F8111DEA6DA',
secret='X7ko7CcZ6+jVFBYalo9tY0NZROP6gu/YLziH1CbE')
rsconnect::deployApp("C:/Users/Saba Akram/Documents/Shiny App/CIA_Factbook_Analysis")
runApp()
if (!requireNamespace("maps", quietly = TRUE)) {
install.packages("maps")
}
library(maps)
rsconnect::deployApp("C:/Users/Saba Akram/Documents/Shiny App/CIA_Factbook_Analysis")
install.packages("maps")
rsconnect::deployApp("C:/Users/Saba Akram/Documents/Shiny App/CIA_Factbook_Analysis")
shiny::runApp()
rsconnect::deployApp("C:/Users/Saba Akram/Documents/Shiny App/CIA_Factbook_Analysis")
rsconnect::deployApp("C:/Users/Saba Akram/Documents/Shiny App/CIA_Factbook_Analysis")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp("C:/Users/Saba Akram/Documents/Shiny App/CIA_Factbook_Analysis")
rsconnect::deployApp("C:/Users/Saba Akram/Documents/Shiny App/CIA_Factbook_Analysis")
runApp()
rsconnect::deployApp("C:/Users/Saba Akram/Documents/Shiny App/CIA_Factbook_Analysis")
runApp()
rsconnect::deployApp("C:/Users/Saba Akram/Documents/Shiny App/CIA_Factbook_Analysis")
install.packages("maps")
rsconnect::deployApp("C:/Users/Saba Akram/Documents/Shiny App/CIA_Factbook_Analysis")
install.packages("jsonlite")
rsconnect::deployApp("C:/Users/Saba Akram/Documents/Shiny App/CIA_Factbook_Analysis")
shiny::runApp()
rsconnect::deployApp("C:/Users/Saba Akram/Documents/Shiny App/CIA_Factbook_Analysis")
